<?php
/**
 * @file
 * This module allow user with the right permission to generate automatically
 * the embed code of the more reading tracks of a given artist Deezer
 * (name or ID).
 *
 * This module create an new field widget for textarea type :
 *   - First : allow user to choose instance configuration of request option
 * for Deezer api like : layout, color, format ...
 *   _ Second : In the add/edit form of an entity, the user can see an new
 * display of textarea field type. The widget add to new action :
 *      - first action : a form with two submit : one to give to the user the
 * possibility to copy and paste the embed code directly in the texterea
 * container. And the second submit give a new form with a textfield and
 * new submit.
 *      - This new form allow user to enter the name or the ID of a Deezer
 * artist. Automatic retrieve the more reading track of this artist. And paste
 * the result in the textarea field container.
 *
 * This module has also a batch action. The user can interact with by two
 * methods : the drush command or the form.
 *
 * All error are save in new table in database and are show in a page to allow
 * user to search why the automatic playlist Deezer does not have result.
 * This table is cleaning by a cron action if administrator choose this option.
 */

/**
 * Define Proxy configuration.
 */
define('PROXY_CONFIGURATION', array(
  'proxy_server' => variable_get('proxy_server', ''),
  'proxy_port' => variable_get('proxy_port', 8080),
  'proxy_username' => variable_get('proxy_username', ''),
  'proxy_password' => variable_get('proxy_password', ''),
  'proxy_user_agent' => variable_get('proxy_user_agent', ''),
));

/**
 * Implements hook_permission().
 */
function auto_playlist_deezer_permission() {

}

/**
 * Implements hook_menu().
 */
function auto_playlist_deezer_menu() {

}

/**
 * Implements hook_theme().
 */
function auto_playlist_deezer_theme() {
  return array(
    'auto_playlist_deezer_theme_values_element' => array(
      'render element' => 'form',
    ),
    'auto_playlist_deezer_display_iframe' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function auto_playlist_deezer_cron() {

}

/**
 * Implements hook_field_widget_info().
 */
function auto_playlist_deezer_field_widget_info() {
  $widgets = array();

  $widgets['inline_form_playlist_deezer'] = array(
    'label' => t('Inline form playlist Deezer'),
    'field types' => array('text_long'),
    'settings' => array(
      'rows' => 5,
      'auto_playlist_deezer' => array(
        'paste_embed_deezer' => 1,
        'automatic_embed_deezer' => 0,
        'embed_configuration' => array(
          'width' => 600,
          'height' => 200,
          'layout' => 'dark',
          'playlist' => 0,
          'autoplay' => 0,
          'format' => 'classic',
          'size' => 'medium',
          'type' => 'tracks',
          'color' => '007FEB',
        ),
        'tracks_configuration' => array(
          'limit_tracks' => 10,
        ),
      ),
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function auto_playlist_deezer_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $element = array();

  $element['rows'] = array(
    '#type' => 'textfield',
    '#title' => t('Rows'),
    '#default_value' => $settings['rows'],
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  switch ($widget['type']) {
    case 'inline_form_playlist_deezer' :
      // Generate the part of form for AUto playlist deezer widget.
      $element['auto_playlist_deezer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Auto playlist Deezer widget configuration'),
      );

      // Checkbox user can copy and paste embed code directly. By default TRUE.
      $element['auto_playlist_deezer']['paste_embed_deezer'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow user to copy and paste directly the embed deezer code in textarea.'),
        '#default_value' => $settings['auto_playlist_deezer']['paste_embed_deezer'],
      );

      // Checkbox user can use Deezer API to generate embed code. By default FALSE
      $element['auto_playlist_deezer']['automatic_embed_deezer'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow user to use Deezer API to generate embed code.'),
        '#default_value' => $settings['auto_playlist_deezer']['automatic_embed_deezer'],
      );

      // Embed configuration instance field. Group data for the Deezer API Embed.
      $element['auto_playlist_deezer']['embed_configuration'] = array(
        '#type' => 'fieldset',
        '#title' => t('Embed configuration for Deezer API'),
      );

      // Deezer configuration iframe width. By default 600px.
      $element['auto_playlist_deezer']['embed_configuration']['width'] = array(
        '#type' => 'textfield',
        '#title' => t('The width of Iframe.'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['width'],
        '#element_validate' => array('element_validate_integer_positive'),
      );

      // Deezer configuration iframe height. By default 200px.
      $element['auto_playlist_deezer']['embed_configuration']['height'] = array(
        '#type' => 'textfield',
        '#title' => t('The height of Iframe.'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['height'],
        '#element_validate' => array('element_validate_integer_positive'),
      );

      // Deezer configuration layout. By default dark.
      $element['auto_playlist_deezer']['embed_configuration']['layout'] = array(
        '#type' => 'select',
        '#title' => t('The general layout of the widget'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['layout'],
        '#options' => array(
          'dark' => t('Dark'),
          'light' => t('Light'),
        ),
      );

      // Deezer configuration display playlist. By default FALSE.
      $element['auto_playlist_deezer']['embed_configuration']['playlist'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display the playlist or not'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['playlist'],
      );

      // Deezer configuration autoplay. By default FALSE.
      $element['auto_playlist_deezer']['embed_configuration']['autoplay'] = array(
        '#type' => 'checkbox',
        '#title' => t('Plays automatically the music after loading.'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['autoplay'],
      );

      // Deezer configuration format. By default classic.
      $element['auto_playlist_deezer']['embed_configuration']['format'] = array(
        '#type' => 'select',
        '#title' => t('The layout format of the widget'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['format'],
        '#options' => array(
          'square' => t('Square'),
          'classic' => t('Classic'),
        ),
      );

      // Deezer configuration size. By default medium.
      $element['auto_playlist_deezer']['embed_configuration']['size'] = array(
        '#type' => 'select',
        '#title' => t('The layout size of the widget'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['size'],
        '#options' => array(
          'small' => t('Small'),
          'medium' => t('Medium'),
          'big' => t('Big'),
        ),
      );

      // Deezer configuration type. By default tracks.
      $element['auto_playlist_deezer']['embed_configuration']['type'] = array(
        '#type' => 'select',
        '#title' => t('The type of music you want to play'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['type'],
        '#options' => array(
          'playlist' => t('Playlist'),
          'album' => t('Album'),
          'tracks' => t('Tracks'),
          'charts' => t('Charts'),
          'favorites' => t('Favorites'),
        ),
      );

      // Deezer configuration color. By default 007FEB.
      $element['auto_playlist_deezer']['embed_configuration']['color'] = array(
        '#type' => 'textfield',
        '#title' => t('The general color of the widget. Has to be a hexadecimal value without the #'),
        '#default_value' => $settings['auto_playlist_deezer']['embed_configuration']['color'],
      );

      // Tracks configuration instance field. Group data for the Deezer API.
      $element['auto_playlist_deezer']['tracks_configuration'] = array(
        '#type' => 'fieldset',
        '#title' => t('Tracks configuration for Deezer API'),
      );

      // Deezer configuration limit tracks. By default 10.
      $element['auto_playlist_deezer']['tracks_configuration']['limit_tracks'] = array(
        '#type' => 'textfield',
        '#title' => t('The number limit of tracks that you want to show in the playlist.'),
        '#default_value' => $settings['auto_playlist_deezer']['tracks_configuration']['limit_tracks'],
      );

      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function auto_playlist_deezer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  switch ($widget['type']) {
    case 'inline_form_playlist_deezer':
      // Build parents array for the element's widget.
      $parents = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));

      // Get langcode of the parent entity.
      $parent_langcode = entity_language($element['#entity_type'], $element['#entity']);

      // Assign a unique identifier to each auto playlist deezer widget.
      // Use sha1() because $parents can be long.
      $apd_id = sha1(implode('-', $parents));

      // Create the wrapper ID for the element.
      $wrapper = 'automatic-playlist-deezer-' . $apd_id;

      $element = array(
          '#type' => 'fieldset',
          '#tree' => TRUE,
          '#description' => filter_xss_admin($instance['description']),
          '#prefix' => '<div id="' . $wrapper . '">',
          '#suffix' => '</div>',
          '#apd_id' => $apd_id,
          '#apd_root' => TRUE,
      ) + $element;

      // Initialize the auto playlist deezer array in form state.
      if (empty($form_state['auto_playlist_deezer'][$apd_id])) {
        $form_state['auto_playlist_deezer'][$apd_id] = array(
          'form' => NULL,
          'settings' => $settings,
          'instance' => $instance,
        );

        // Load data from $items variable.
        $form_state['auto_playlist_deezer'][$apd_id]['values'] = array();

        $delta = 0;
        foreach ($items as $item) {
          $form_state['auto_playlist_deezer'][$apd_id]['values'][$delta] = array(
            'value' => $item['value'],
            'weight' => $delta,
            'form' => NULL,
          );
          $delta++;
        }
      }

      // Start to prepare the render of form value in form field.
      $element['values'] = array(
        '#tree' => TRUE,
        '#theme' => 'auto_playlist_deezer_theme_values_element',
      );

      $weight_delta = max(ceil(count($form_state['auto_playlist_deezer'][$apd_id]['values']) * 1.2), 50);
      foreach ($form_state['auto_playlist_deezer'][$apd_id]['values'] as $key => $info) {
        $element['values'][$key]['#info_value'] = $info['value'];
        $element['values'][$key]['#weight'] = $info['weight'];

        if (!empty($info['form'])) {
          $element['values'][$key]['delta'] = array(
            '#type' => 'value',
            '#value' => $info['weight'],
          );

          $element['values'][$key]['form'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('apd-form', 'apd-form-row')),
            '#op' => $info['form'],
            '#parents' => array_merge($parents, array('values', $key, 'form')),
            '#parent_language' => $parent_langcode,
            '#apd_id' => $apd_id,
            '#apd_row_delta' => $key,
          );

          $form_element = &$element['values'][$key]['form'];

          // Add the appopriate form.
          if ($info['form'] == 'manual_edit') {
            $form_element += auto_playlist_deezer_paste_form($form_element, $form_state, $info['value']);
          }
          elseif ($info['form'] == 'automatic_edit') {
            $form_element += auto_playlist_deezer_automatic_form($form_element, $form_state);
          }
          elseif ($info['form'] == 'remove') {
            $form_element += auto_playlist_deezer_remove_form($form_element, $form_state);
          }
        }
        else {
          $row = &$element['values'][$key];
          $row['delta'] = array(
            '#type' => 'weight',
            '#deltat' => $weight_delta,
            '#default_value' => $info['weight'],
            '#attributes' => array('class' => array('apd-values-delta')),
          );

          // Add container action.
          $row['actions'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('apd-container-form-operations')),
          );

          // Add the Manual edit action for value element row.
          $row['actions']['apd_value_manual_edit'] = array(
            '#type' => 'submit',
            '#value' => t('Manual editing'),
            '#limit_validation_errors' => array(),
            '#name' => 'apd-' . $apd_id . '-values-manual-edit-' . $key,
            '#ajax' => array(
              'callback' => 'auto_playlist_deezer_ajax_get_element',
              'wrapper' => $wrapper
            ),
            '#submit' => array('auto_playlist_deezer_open_row_element'),
            '#apd_row_delta' => $key,
            '#apd_row_form' => 'manual_edit',
          );

          // Add the Automatic edit action for value element row.
          $row['actions']['apd_value_automatic_edit'] = array(
            '#type' => 'submit',
            '#value' => t('Automatic editing'),
            '#limit_validation_errors' => array(),
            '#name' => 'apd-' . $apd_id . '-values-automatic-edit-' . $key,
            '#ajax' => array(
              'callback' => 'auto_playlist_deezer_ajax_get_element',
              'wrapper' => $wrapper
            ),
            '#submit' => array('auto_playlist_deezer_open_row_element'),
            '#apd_row_delta' => $key,
            '#apd_row_form' => 'automatic_edit',
          );

          // Add the delete action for value element row.
          $row['actions']['apd_value_delete'] = array(
            '#type' => 'submit',
            '#value' => t('Remove'),
            '#limit_validation_errors' => array(),
            '#name' => 'apd-' . $apd_id . '-values-remove-' . $key,
            '#ajax' => array(
              'callback' => 'auto_playlist_deezer_ajax_get_element',
              'wrapper' => $wrapper
            ),
            '#submit' => array('auto_playlist_deezer_open_row_element'),
            '#apd_row_delta' => $key,
            '#apd_row_form' => 'remove',
          );
        }
      }

      // If cardinality equals number of items return form.
      if ($field['cardinality'] > 0 && $field['cardinality'] == count($form_state['auto_playlist_deezer'][$apd_id]['values'])) {
        return $element;
      }

      // Test if we need to load specific form.
      if (empty($form_state['auto_playlist_deezer'][$apd_id]['form'])) {
        if ($settings['auto_playlist_deezer']['paste_embed_deezer']) {
          $element['action']['paste_embed_deezer'] = array(
            '#type' => 'submit',
            '#value' => t('Paste embed deezer code'),
            '#name' => 'apd-' . $apd_id . '-paste',
            '#ajax' => array(
              'callback' => 'auto_playlist_deezer_ajax_get_element',
              'wrapper' => $wrapper
            ),
            '#limit_validation_errors' => array(),
            '#submit' => array('auto_playlist_deezer_open_automatic_form'),
            '#apd_form' => 'apd_paste',
          );
        }

        if ($settings['auto_playlist_deezer']['automatic_embed_deezer']) {
          $element['action']['automatic_embed_deezer'] = array(
            '#type' => 'submit',
            '#value' => t('Automatic embed deezer code'),
            '#name' => 'apd-' . $apd_id . '-automatic',
            '#ajax' => array(
              'callback' => 'auto_playlist_deezer_ajax_get_element',
              'wrapper' => $wrapper
            ),
            '#limit_validation_errors' => array(),
            '#submit' => array('auto_playlist_deezer_open_automatic_form'),
            '#apd_form' => 'apd_automatic',
          );
        }
      }
      else {
        $element['form'] = array(
          '#type' => 'fieldset',
          '#attributes' => array('class' => array('apd-form', 'apd-form-bottom')),
          '#parents' => array_merge($parents, array('form')),
          '#apd_id' => $apd_id,
          '#parent_language' => $parent_langcode,
          '#entity_type' => $instance['entity_type'],
        );

        // When action form is paste or edit we just need to load a
        // textarea field.
        if ($form_state['auto_playlist_deezer'][$apd_id]['form'] == 'apd_paste') {
          $element['form']['#op'] = 'add';
          $element['form'] += auto_playlist_deezer_paste_form($element['form'], $form_state);
        }
        // When action form is automatic embed or edit automatic we load
        // new form with textfield and submit action.
        if ($form_state['auto_playlist_deezer'][$apd_id]['form'] == 'apd_automatic') {
          $element['form']['#op'] = 'add';
          $element['form'] += auto_playlist_deezer_automatic_form($element['form'], $form_state);
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function auto_playlist_deezer_field_formatter_info() {
  return array(
    'auto_playlist_deezer_embed' => array(
      'label' => t('Auto playlist Deezer Embed'),
      'field types' => array('text_long'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function auto_playlist_deezer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'auto_playlist_deezer_embed' :
      foreach ($items as $item) {
        $element[] = array(
          '#theme' => 'auto_playlist_deezer_display_iframe',
          '#element' => $item['value'],
        );
      }
      break;
  }
  return $element;
}

/**
 * Action #submit callback : open a form int the widget.
 *
 * The form is show at the bottom of the widget.
 */
function auto_playlist_deezer_open_automatic_form($form, &$form_state) {
  $element = auto_playlist_deezer_ajax_get_element($form, $form_state);
  $apd_id = $element['#apd_id'];

  // Rebuild form widget.
  $form_state['rebuild'] = TRUE;

  $form_state['auto_playlist_deezer'][$apd_id]['form'] = $form_state['triggering_element']['#apd_form'];

}

function auto_playlist_deezer_ajax_get_element($form, $form_state) {
  $element = array();

  $array_parents = $form_state['triggering_element']['#array_parents'];
  // Remove action and action container.
  $array_parents = array_slice($array_parents, 0, -2);

  while (!isset($element['#apd_root'])) {
    $element = drupal_array_get_nested_value($form, $array_parents);
    array_pop($array_parents);
  }

  return $element;
}

/**
 * Implements hook_field_attach_submit().
 */
function auto_playlist_deezer_field_attach_submit($parent_entity_type, $parent_entity, $form, &$form_state) {
  list(, , $bundle_name) = entity_extract_ids($parent_entity_type, $parent_entity);

  foreach (field_info_instances($parent_entity_type, $bundle_name) as $instance_name => $instance) {
    if (isset($instance['widget']) && strpos($instance['widget']['type'], 'inline_form_playlist_deezer') === 0) {
      $field_name = $instance['field_name'];
      if (!isset($form[$field_name])) {
        // The field wasn't found on this form, skip it.
        continue;
      }
      $langcode = $form[$field_name]['#language'];

      // The location of #apd_id for textarea is under the delta value of item.
      // We need to loop on numeric increment to test if we find it.
      $apd_id = '';
      foreach ($form[$field_name][$langcode] as $key => $value) {
        if (is_numeric($key) && is_array($value)) {
          $array_parents = array_merge($form[$field_name][$langcode][$key]['#array_parents'], array('#apd_id'));
          if (!drupal_array_nested_key_exists($form, $array_parents)) {
            continue;
          }
          else {
            $new_apd_id = drupal_array_get_nested_value($form, $array_parents);
            if ($apd_id != $new_apd_id) {
              $apd_id = $new_apd_id;
            }
          }
        }
      }

      if (empty($apd_id)) {
        // The field is present on the form, but the Auto Playlist Deezer
        // widget wasn't added.
        continue;
      }

      if (empty($form_state['auto_playlist_deezer'][$apd_id])) {
        // No data found, no need to do anything.
        continue;
      }

      $values = $form_state['auto_playlist_deezer'][$apd_id];

      // Respect the entity weights.
      // uasort($values['entities'], 'drupal_sort_weight');
      // Go through the IEF data and assemble a list of ids.
      $field_values = array();
      foreach ($values['values'] as $item) {
        $field_values[] = $item;
      }

      if (!empty($field_values)) {
        // Set the list of ids as the field value.
        $parent_entity->{$field_name}[$langcode] = $field_values;
      }
    }
  }
}

function auto_playlist_deezer_paste_form($element_form, &$form_state, $default_value = NULL) {
  $settings = $form_state['auto_playlist_deezer'][$element_form['#apd_id']]['settings'];

  $delta = $element_form['#apd_id'];
  if ($element_form['#op'] == 'add') {
    $element_form['#title'] = t('Paste the embed deezer code.');
    $element_form['#description'] = t('Copy from deezer the embed code that you want to add in this field.');
    $submit_value = t('Create embed Deezer');
  }
  elseif ($element_form['#op'] == 'manual_edit') {
    $element_form['#title'] = t('Update the embed deezer code.');
    $delta .= '-' . $element_form['#apd_row_delta'];
    $element_form['#description'] = t('Copy from deezer the embed code that you want to replace in this field.');
    $submit_value = t('Update embed Deezer');
  }

  $element_form['field_text_value'] = array(
    '#title' => $element_form['#title'],
    '#description' => $element_form['#description'],
    '#type' => 'textarea',
    '#rows' => $settings['rows'],
    '#default_values' => isset($default_value) ? $default_value : '',
    '#attributes' => array('class' => array('text-full')),
  );

  // Form action part.
  $element_form['actions'] = array(
    '#type' => 'container',
    '#weight' => 50,
  );

  $element_form['actions']['apd_' . $element_form['#op'] . '_save'] = array(
    '#type' => 'submit',
    '#value' => $submit_value,
    '#name' => 'apd-' . $element_form['#op'] . '-submit-' . $delta,
    '#limit_validation_errors' => array($element_form['#parents']),
    '#attributes' => array('class' => array('apd-paste-submit')),
    '#ajax' => array(
      'callback' => 'auto_playlist_deezer_ajax_get_element',
      'wrapper' => 'automatic-playlist-deezer-' . $element_form['#apd_id'],
    ),
  );
  $element_form['actions']['apd_' . $element_form['#op'] . '_cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'apd-' . $element_form['#op'] . '-cancel-' . $delta,
    '#limit_validation_errors' => array(),
    '#attributes' => array('class' => array('apd-paste-cancel')),
    '#ajax' => array(
      'callback' => 'auto_playlist_deezer_ajax_get_element',
      'wrapper' => 'automatic-playlist-deezer-' . $element_form['#apd_id'],
    ),
  );

  if ($element_form['#op'] == 'add') {
    $element_form['actions']['apd_add_save']['#submit'] = array(
      'auto_playlist_deezer_trigger_submit',
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_form',
    );
    $element_form['actions']['apd_add_cancel']['#submit'] = array(
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_form',
    );
  }
  elseif ($element_form['#op'] == 'manual_edit') {
    $element_form['actions']['apd_manual_edit_save']['#apd_row_delta'] = $element_form['#apd_row_delta'];
    $element_form['actions']['apd_manual_edit_cancel']['#apd_row_delta'] = $element_form['#apd_row_delta'];

    $element_form['actions']['apd_manual_edit_save']['#submit'] = array(
      'auto_playlist_deezer_trigger_submit',
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_row_form',
    );
    $element_form['actions']['apd_manual_edit_cancel']['#submit'] = array(
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_row_form',
    );
  }

  $element_form['#apd_element_submit'][] = 'auto_playlist_deezer_paste_form_submit';
  $element_form['#pre_render'][] = 'auto_display_deezer_pre_render_fieldset_markup';

  return $element_form;
}

function auto_playlist_deezer_close_form($form, &$form_state) {
  $element = auto_playlist_deezer_ajax_get_element($form, $form_state);
  $apd_id = $element['#apd_id'];

  $form_state['rebuild'] = TRUE;
  $form_state['auto_playlist_deezer'][$apd_id]['form'] = NULL;
}

function auto_playlist_deezer_paste_form_submit($element_form, &$form_state) {
  $apd_id = $element_form['#apd_id'];
  $instance = $form_state['auto_playlist_deezer'][$apd_id]['instance'];
  $field_name = $instance['field_name'];

  if ($element_form['#op'] == 'add') {
    $delta = 0;
    if (!empty($form_state['auto_playlist_deezer'][$apd_id]['values'])) {
      $delta = max(array_keys($form_state['auto_playlist_deezer'][$apd_id]['values'])) + 1;
    }
    $form_state['auto_playlist_deezer'][$apd_id]['values'][] = array(
      'value' => $form_state['values'][$field_name]['und']['form']['field_text_value'],
      'format' => NULL,
      'weight' => $delta,
    );
  }
  else {
    $delta = $element_form['#apd_row_delta'];
    $form_state['auto_playlist_deezer'][$apd_id]['values'][$delta]['value'] = $form_state['values'][$field_name]['und']['values'][$delta]['form']['field_text_value'];
  }
}

/**
 * Implements hook_form_alter().
 */
function auto_playlist_deezer_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_state['auto_display_deezer'])) {
    $element_submit = NULL;
    if (!empty($form['submit'])) {
      $element_submit = &$form['submit'];
    }
    elseif (!empty($form['actions']['submit'])) {
      $element_submit = &$form['actions']['submit'];
    }

    if ($element_submit) {
      $submit = array_merge(array('auto_playlist_deezer_trigger_submit'), $form['#submit']);
      if (!empty($element_submit['#submit'])) {
        $submit = array_merge($submit, $element_submit['#submit']);
        $element_submit['#submit'] = array_unique($submit);
      }
      else {
        $element_submit['#submit'] = $submit;
      }
      $element_submit['#apd_submit_all'] = TRUE;
    }
  }
}

function auto_playlist_deezer_trigger_submit($form, &$form_state) {
  if (!empty($form_state['triggering_element']['#apd_submit_all'])) {
    auto_playlist_deezer_form_submit($form, $form_state);
  }
  else {
    $array_parents = $form_state['triggering_element']['#array_parents'];
    $array_parents = array_slice($array_parents, 0, -2);
    $element = drupal_array_get_nested_value($form, $array_parents);
    auto_playlist_deezer_form_submit($element, $form_state);
  }
}

function auto_playlist_deezer_form_submit($element, &$form_state) {
  foreach (element_children($element) as $key) {
    if (!empty($element[$key])) {
      auto_playlist_deezer_form_submit($element[$key], $form_state);
    }
  }

  if (!empty($element['#apd_element_submit'])) {
    foreach ($element['#apd_element_submit'] as $function) {
      $function($element, $form_state);
    }
  }
}

/**
 * Callback : submit for row element item.
 */
function auto_playlist_deezer_open_row_element($form, &$form_state) {
  $element = auto_playlist_deezer_ajax_get_element($form, $form_state);
  $apd_id = $element['#apd_id'];
  $delta = $form_state['triggering_element']['#apd_row_delta'];

  $form_state['rebuild'] = TRUE;
  $form_state['auto_playlist_deezer'][$apd_id]['values'][$delta]['form'] = $form_state['triggering_element']['#apd_row_form'];
}

/**
 * Theme : return the HTML form of value(s) in field using auto playlist
 * deezer field widget.
 */
function theme_auto_playlist_deezer_theme_values_element($vars) {
  $header = array();
  $rows = array();

  $form = $vars['form'];
  $has_tabledrag = TRUE;

  foreach(element_children($form) as $key) {
    if (!empty($form[$key]['form'])) {
      $has_tabledrag = FALSE;
    }
  }

  if ($has_tabledrag) {
    $header[] = array('data' => '', 'class' => array('apd-tabledrag-header'));
    $header[] = array('data' => t('Sort order'), 'class' => array('apd-sort-order-header'));
  }

  $header[] = t('Value');
  $header[] = t('Operation');

  foreach (element_children($form) as $key) {
    $row_classes = array('apd-row-value');
    $cells = array();
    if ($has_tabledrag) {
      $cells[] = array('data' => '', 'class' => array('apd-tabledrag-handle'));
      $cells[] = drupal_render($form[$key]['delta']);
      $row_classes[] = 'draggable';
    }
    $cells[] = array(
      'data' => $form[$key]['#info_value'],
    );

    $cells[] = array(
      'data' => drupal_render($form[$key]['actions']),
    );

    $rows[] = array('data' => $cells, 'class' => $row_classes);

    if (!empty($form[$key]['form'])) {
      $row = array(
        array(
          'data' => drupal_render($form[$key]['form']),
          'colspan' => 3,
        ),
      );
      $rows[] = array(
        'data' => $row,
        'class' => array('apd-row-form'),
        'no_striping' => TRUE,
      );
    }
  }

  if (!empty($rows)) {
    $id = 'apd-value-table-' . $form['#id'];
    if ($has_tabledrag) {
      drupal_add_tabledrag($id, 'order', 'sibling', 'apd-values-delta');
    }

    $table_attributes = array(
      'id' => $id,
      'class' => array('apd-values-table'),
    );

    // Return table theme of the list items.
    return theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'sticky' => FALSE,
      'attributes' => $table_attributes,
    ));
  }
}

/**
 * Theme for field content embed deezer.
 */
function theme_auto_playlist_deezer_display_iframe($element) {
  $output = '';

  if (!empty($element['element'])) {
    $output .= $element['element'];
  }

  return $output;
}

function auto_playlist_deezer_close_child_forms($form, &$form_state) {
  $element = auto_playlist_deezer_ajax_get_element($form, $form_state);
  foreach (element_children($element) as $key) {
    if (!empty($element[$key])) {
      auto_playlist_deezer_close_all_forms($element[$key], $form_state);
    }
  }
}

function auto_playlist_deezer_close_all_forms($elements, &$form_state) {
  foreach (element_children($elements) as $key) {
    if (!empty($elements[$key])) {
      auto_playlist_deezer_close_all_forms($elements[$key], $form_state);
    }
  }

  if (!empty($elements['#apd_id'])) {
    $apd_id = $elements['#apd_id'];
    $form_state['auto_playlist_deezer'][$apd_id]['form'] = NULL;

    foreach ($form_state['auto_playlist_deezer'][$apd_id]['values'] as &$value) {
      $value['form'] = NULL;
    }
  }
}

function auto_display_deezer_pre_render_fieldset_markup($form) {
  $sort = array();
  foreach (element_children($form) as $key) {
    $element = $form[$key];
    if (isset($element['#fieldset']) && isset($form[$element['#fieldset']])) {
      $form[$element['#fieldset']][$key] = $element;
      unset($form[$key]);
      if (!in_array($key, $sort)) {
        $sort[] = $element['#fieldset'];
      }
    }
  }
  foreach ($sort as $key) {
    uasort($form[$key], 'element_sort');
  }

  return $form;
}

function auto_playlist_deezer_close_row_form($form, &$form_state) {
  $element = auto_playlist_deezer_ajax_get_element($form, $form_state);
  $apd_id = $element['#apd_id'];
  $delta = $form_state['triggering_element']['#apd_row_delta'];

  $form_state['rebuild'] = TRUE;
  $form_state['auto_playlist_deezer'][$apd_id]['values'][$delta]['form'] = NULL;
}

/**
 *
 */
function auto_playlist_deezer_remove_form($form_element, $form_state) {
  $delta = $form_element['#apd_id'] . '-' . $form_element['#apd_row_delta'];

  // Create the form.
  $form_element['message'] = array(
    '#markup' => '<div>' . t('Are you sure you want to remove this content. This action is irreversible.'),
  );

  // Add action part.
  $form_element['actions'] = array(
    '#type' => 'container',
    '#weight' => 50,
  );

  $form_element['actions']['apd_remove_confirm'] = array(
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#name' => 'apd-remove-confirm-' . $delta,
    '#limit_validation_errors' => array($form_element['#parents']),
    '#ajax' => array(
      'callback' => 'auto_playlist_deezer_ajax_get_element',
      'wrapper' => 'automatic-playlist-deezer-' . $form_element['#apd_id'],
    ),
    '#submit' => array('auto_playlist_deezer_remove_confirm'),
    '#apd_row_delta' => $form_element['#apd_row_delta']
  );
  $form_element['actions']['apd_remove_cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'apd-remove-cancel-' . $delta,
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'auto_playlist_deezer_ajax_get_element',
      'wrapper' => 'automatic-playlist-deezer-' . $form_element['#apd_id'],
    ),
    '#submit' => array('auto_playlist_deezer_close_row_form'),
    '#apd_row_delta' => $form_element['#apd_row_delta']
  );

  return $form_element;
}

function auto_playlist_deezer_remove_confirm($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $element = auto_playlist_deezer_ajax_get_element($form, $form_state);
  $apd_id = $element['#apd_id'];
  $delta = $form_state['triggering_element']['#apd_row_delta'];

  unset($form_state['auto_playlist_deezer'][$apd_id]['values'][$delta]);
}

/**
 *
 */
function auto_playlist_deezer_automatic_form($element_form, $form_state) {
  $settings = $form_state['auto_playlist_deezer'][$element_form['#apd_id']]['settings'];
  $delta = $element_form['#apd_id'];
  $element_form['#description'] = t('Enter the Name or ID to generate the embed deezer code.');

  if ($element_form['#op'] == 'add') {
    $element_form['#title'] = t('Generate the embed deezer code.');
    $submit_value = t('Generate embed Deezer');
  }
  elseif ($element_form['#op'] == 'automatic_edit') {
    $element_form['#title'] = t('Update the embed deezer code.');
    $delta .= '-' . $element_form['#apd_row_delta'];
    $submit_value = t('Update embed Deezer');
  }

  $element_form['field_name_id'] = array(
    '#title' => $element_form['#title'],
    '#description' => $element_form['#description'],
    '#type' => 'textfield',
    '#rows' => $settings['rows'],
    '#required' => TRUE,
    '#attributes' => array('class' => array('textfield')),
  );

  // Form action part.
  $element_form['actions'] = array(
    '#type' => 'container',
    '#weight' => 50,
  );

  $element_form['actions']['apd_' . $element_form['#op'] . '_save'] = array(
    '#type' => 'submit',
    '#value' => $submit_value,
    '#name' => 'apd-' . $element_form['#op'] . '-submit-' . $delta,
    '#limit_validation_errors' => array($element_form['#parents']),
    '#attributes' => array('class' => array('apd-automatic-submit')),
    '#ajax' => array(
      'callback' => 'auto_playlist_deezer_ajax_get_element',
      'wrapper' => 'automatic-playlist-deezer-' . $element_form['#apd_id'],
    ),
  );
  $element_form['actions']['apd_' . $element_form['#op'] . '_cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'apd-' . $element_form['#op'] . '-cancel-' . $delta,
    '#limit_validation_errors' => array(),
    '#attributes' => array('class' => array('apd-automatic-cancel')),
    '#ajax' => array(
      'callback' => 'auto_playlist_deezer_ajax_get_element',
      'wrapper' => 'automatic-playlist-deezer-' . $element_form['#apd_id'],
    ),
  );

  if ($element_form['#op'] == 'add') {
    $element_form['actions']['apd_add_save']['#submit'] = array(
      'auto_playlist_deezer_trigger_submit',
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_form',
    );
    $element_form['actions']['apd_add_cancel']['#submit'] = array(
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_form',
    );
  }
  elseif ($element_form['#op'] == 'automatic_edit') {
    $element_form['actions']['apd_automatic_edit_save']['#apd_row_delta'] = $element_form['#apd_row_delta'];
    $element_form['actions']['apd_automatic_edit_cancel']['#apd_row_delta'] = $element_form['#apd_row_delta'];

    $element_form['actions']['apd_automatic_edit_save']['#submit'] = array(
      'auto_playlist_deezer_trigger_submit',
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_row_form',
    );
    $element_form['actions']['apd_automatic_edit_cancel']['#submit'] = array(
      'auto_playlist_deezer_close_child_forms',
      'auto_playlist_deezer_close_row_form',
    );
  }

  $element_form['#apd_element_submit'][] = 'auto_playlist_deezer_automatic_form_submit';
  $element_form['#pre_render'][] = 'auto_display_deezer_pre_render_fieldset_markup';

  return $element_form;
}


function auto_playlist_deezer_automatic_form_submit($element_form, &$form_state) {
  $apd_id = $element_form['#apd_id'];
  $settings = $form_state['auto_playlist_deezer'][$apd_id]['settings'];
  $instance = $form_state['auto_playlist_deezer'][$apd_id]['instance'];
  $field_name = $instance['field_name'];

  if ($element_form['#op'] == 'add') {
    $field_value = $form_state['values'][$field_name]['und']['form']['field_name_id'];
    $delta = 0;

    if (!empty($form_state['auto_playlist_deezer'][$apd_id]['values'])) {
      $delta = max(array_keys($form_state['auto_playlist_deezer'][$apd_id]['values'])) + 1;
    }

    $embed_deezer = auto_playlist_deezer_get_deezer_value($field_value, $settings);
    if (!empty($embed_deezer)) {
      $form_state['auto_playlist_deezer'][$apd_id]['values'][] = array(
        'value' => $embed_deezer,
        'format' => NULL,
        'weight' => $delta,
      );
    }
    else {
      // @TODO return message to say that we can't save an empty value.
      // @TODO form_set_error or just a error message ?
    }
  }
  else {
    $delta = $element_form['#apd_row_delta'];
    $field_value = $form_state['values'][$field_name]['und']['values'][$delta]['form']['field_name_id'];
    $embed_deezer = auto_playlist_deezer_get_deezer_value($field_value, $settings);

    if (!empty($embed_deezer)) {
      $form_state['auto_playlist_deezer'][$apd_id]['values'][$delta]['value'] = $embed_deezer;
    }
  }
}

function auto_playlist_deezer_get_deezer_value($value, $settings) {
  module_load_include('php', 'auto_playlist_deezer', 'includes/AutoPlaylistDeezer');

  $deezer_embed_settings = $settings['auto_playlist_deezer']['embed_configuration'];
  $deezer_track_settings = $settings['auto_playlist_deezer']['tracks_configuration'];

  $embed_deezer = new AutoPlaylistDeezer($deezer_embed_settings, $deezer_track_settings, PROXY_CONFIGURATION);

  // First we need to check if the data is a string or int.
  if (is_numeric($value)) {
    $embed_deezer->getTopTracksListByArtistId($value);
  }
  elseif (is_string($value)) {
    $embed_deezer->getTopTracksListByArtistName($value);
  }
  else {
    // @TODO set an error message that say the data to search is not an numeric or string type.
  }

  return $embed_deezer->iframe;
}
